generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  role     String
}

model SalesRep {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  phoneNumber         String               @unique
  password            String
  countryId           Int
  country             String
  region_id           Int
  region              String
  route_id            Int
  route               String               @db.VarChar(100)
  role                String?              @default("USER")
  status              Int?                 @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  manager_id          Int
  photoUrl            String?              @default("")
  ClientPayment       ClientPayment[]
  feedbackReports     FeedbackReport[]
  journeyPlans        JourneyPlan[]
  LoginHistory        LoginHistory[]
  MyOrder             MyOrder[]
  productReports      ProductReport[]
  productReturns      ProductReturn[]
  productReturnItems  ProductReturnItem[]
  productsSamples     ProductsSample[]
  productsSampleItems ProductsSampleItem[]
  reports             Report[]
  countryRelation     Country              @relation(fields: [countryId], references: [id])
  targets             Target[]
  tokens              Token[]
  UpliftSale          UpliftSale[]
  visibilityReports   VisibilityReport[]
  leaves              Leave[]
  Manager             Manager?
  Task                Task[]

  @@index([countryId], map: "SalesRep_countryId_fkey")
}

model LoginHistory {
  id         Int       @id @default(autoincrement())
  userId     Int
  loginAt    DateTime  @default(now())
  logoutAt   DateTime?
  isLate     Boolean?  @default(false)
  isEarly    Boolean?  @default(false)
  timezone   String?   @default("UTC")
  shiftStart DateTime?
  shiftEnd   DateTime?
  duration   Int?
  status     String?   @default("ACTIVE")
  user       SalesRep  @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([loginAt])
  @@index([logoutAt])
}

model Target {
  id            Int      @id @default(autoincrement())
  salesRepId    Int
  isCurrent     Boolean  @default(false)
  targetValue   Int
  achievedValue Int      @default(0)
  achieved      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  salesRep      SalesRep @relation(fields: [salesRepId], references: [id])

  @@index([salesRepId], map: "Target_salesRepId_fkey")
}

model Manager {
  id         Int              @id @default(autoincrement())
  userId     Int              @unique
  department String?
  checkins   ManagerCheckin[]
  user       SalesRep         @relation(fields: [userId], references: [id])

  @@map("managers")
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  salesRepId  Int
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  blacklisted Boolean   @default(false)
  lastUsedAt  DateTime?
  user        SalesRep  @relation(fields: [salesRepId], references: [id])

  @@index([salesRepId], map: "Token_userId_fkey")
  @@index([blacklisted])
  @@index([lastUsedAt])
}

model Regions {
  id        Int      @id @default(autoincrement())
  name      String
  countryId Int
  status    Int?     @default(0)
  country   Country  @relation(fields: [countryId], references: [id])
  Stores    Stores[]

  @@unique([name, countryId])
  @@index([countryId], map: "Regions_countryId_fkey")
}

model Country {
  id       Int        @id @default(autoincrement())
  name     String
  status   Int?       @default(0)
  clients  Clients[]
  regions  Regions[]
  salesRep SalesRep[]
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  priceOptions PriceOption[]
}

model PriceOption {
  id         Int         @id @default(autoincrement())
  option     String
  value      Int
  categoryId Int
  orderItems OrderItem[]
  category   Category    @relation(fields: [categoryId], references: [id])

  @@index([categoryId], map: "PriceOption_categoryId_fkey")
}

model StoreQuantity {
  id        Int     @id @default(autoincrement())
  quantity  Int
  storeId   Int
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  store     Stores  @relation(fields: [storeId], references: [id])

  @@index([productId], map: "StoreQuantity_productId_fkey")
  @@index([storeId], map: "StoreQuantity_storeId_fkey")
}

model Stores {
  id              Int               @id @default(autoincrement())
  name            String
  regionId        Int?
  client_type     Int?
  countryId       Int
  region_id       Int?
  status          Int               @default(0)
  ProductDetails  ProductDetails[]
  purchase        Purchase[]
  purchaseHistory PurchaseHistory[]
  storeQuantities StoreQuantity[]
  region          Regions?          @relation(fields: [regionId], references: [id])
  transfersFrom   TransferHistory[] @relation("FromStore")
  transfersTo     TransferHistory[] @relation("ToStore")

  @@index([regionId], map: "Stores_regionId_fkey")
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  category_id     Int
  category        String
  description     String?
  currentStock    Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  clientId        Int?
  image           String?           @default("")
  orderItems      OrderItem[]
  client          Clients?          @relation(fields: [clientId], references: [id])
  ProductDetails  ProductDetails[]
  purchaseHistory PurchaseHistory[]
  PurchaseItem    PurchaseItem[]
  storeQuantities StoreQuantity[]
  TransferHistory TransferHistory[]
  UpliftSaleItem  UpliftSaleItem[]

  @@index([clientId], map: "Product_clientId_fkey")
}

model TransferHistory {
  id            Int      @id @default(autoincrement())
  productId     Int
  fromStoreId   Int
  toStoreId     Int
  quantity      Int
  transferredAt DateTime @default(now())
  fromStore     Stores   @relation("FromStore", fields: [fromStoreId], references: [id])
  product       Product  @relation(fields: [productId], references: [id])
  toStore       Stores   @relation("ToStore", fields: [toStoreId], references: [id])

  @@index([fromStoreId], map: "TransferHistory_fromStoreId_fkey")
  @@index([productId], map: "TransferHistory_productId_fkey")
  @@index([toStoreId], map: "TransferHistory_toStoreId_fkey")
}

model ProductDetails {
  id          Int     @id @default(autoincrement())
  productId   Int
  date        String  @default("current_timestamp(3)") @db.VarChar(100)
  reference   String
  quantityIn  Int
  quantityOut Int
  newBalance  Int
  storeId     Int
  staff       Int
  staff_name  String  @db.VarChar(100)
  update_date String  @db.VarChar(50)
  product     Product @relation(fields: [productId], references: [id])
  store       Stores  @relation(fields: [storeId], references: [id])

  @@index([productId], map: "ProductDetails_productId_fkey")
  @@index([storeId], map: "ProductDetails_storeId_fkey")
}

model Purchase {
  id          Int            @id @default(autoincrement())
  storeId     Int
  date        DateTime       @default(now())
  supplierId  Int
  totalAmount Int
  store       Stores         @relation(fields: [storeId], references: [id])
  supplier    Suppliers      @relation(fields: [supplierId], references: [id])
  items       PurchaseItem[]

  @@index([storeId], map: "Purchase_storeId_fkey")
  @@index([supplierId], map: "Purchase_supplierId_fkey")
}

model PurchaseItem {
  id         Int      @id @default(autoincrement())
  purchaseId Int
  productId  Int
  quantity   Int
  price      Float
  product    Product  @relation(fields: [productId], references: [id])
  purchase   Purchase @relation(fields: [purchaseId], references: [id])

  @@index([productId], map: "PurchaseItem_productId_fkey")
  @@index([purchaseId], map: "PurchaseItem_purchaseId_fkey")
}

model PurchaseHistory {
  id               Int      @id @default(autoincrement())
  storeId          Int
  productId        Int
  previousQuantity Int
  purchaseQuantity Int
  newBalance       Int
  createdAt        DateTime @default(now())
  product          Product  @relation(fields: [productId], references: [id])
  store            Stores   @relation(fields: [storeId], references: [id])

  @@index([productId], map: "PurchaseHistory_productId_fkey")
  @@index([storeId], map: "PurchaseHistory_storeId_fkey")
}

model Clients {
  id                 Int                  @id @default(autoincrement())
  name               String
  address            String?
  latitude           Float?
  longitude          Float?
  balance            Decimal?             @db.Decimal(11, 2)
  email              String?
  region_id          Int
  region             String
  route_id           Int?
  route_name         String?
  contact            String
  tax_pin            String?
  location           String?
  status             Int                  @default(0)
  client_type        Int?
  countryId          Int
  ClientPayment      ClientPayment[]
  country            Country              @relation(fields: [countryId], references: [id])
  feedbackReports    FeedbackReport[]
  journeyPlans       JourneyPlan[]
  checkins           ManagerCheckin[]
  MyOrder            MyOrder[]
  Product            Product[]
  productReports     ProductReport[]
  productReturns     ProductReturn[]
  productReturnItems ProductReturnItem[]
  productsSamples    ProductsSample[]
  productSampleItems ProductsSampleItem[]
  reports            Report[]
  UpliftSale         UpliftSale[]
  visibilityReports  VisibilityReport[]

  @@index([countryId], map: "Clients_countryId_fkey")
}

model ClientPayment {
  id       Int      @id @default(autoincrement())
  clientId Int
  amount   Float
  imageUrl String?
  date     DateTime @default(now())
  status   String?
  method   String?
  userId   Int
  client   Clients  @relation(fields: [clientId], references: [id])
  user     SalesRep @relation(fields: [userId], references: [id])

  @@index([clientId], map: "ClientPayment_clientId_fkey")
  @@index([userId], map: "ClientPayment_userId_fkey")
}

model Riders {
  id            Int     @id @default(autoincrement())
  name          String
  contact       String
  id_number     String
  company_id    Int
  company       String
  status        Int?
  password      String?
  device_id     String?
  device_name   String?
  device_status String?
  token         String?
}

model RidersCompany {
  id     Int    @id @default(autoincrement())
  name   String
  status Int?
}

model ManagerCheckin {
  id                Int       @id @default(autoincrement())
  managerId         Int
  clientId          Int
  date              DateTime
  checkInAt         DateTime?
  checkOutAt        DateTime?
  latitude          Float?
  longitude         Float?
  notes             String?
  checkoutLatitude  Float?
  checkoutLongitude Float?
  imageUrl          String?
  status            String?
  timezone          String?
  visitDuration     Int?
  visitNumber       Int?
  client            Clients   @relation(fields: [clientId], references: [id])
  manager           Manager   @relation(fields: [managerId], references: [id])

  @@index([managerId])
  @@index([clientId])
}

model OrderItem {
  id            Int          @id @default(autoincrement())
  orderId       Int
  productId     Int
  quantity      Int
  priceOptionId Int?
  order         MyOrder      @relation(fields: [orderId], references: [id])
  priceOption   PriceOption? @relation(fields: [priceOptionId], references: [id])
  product       Product      @relation(fields: [productId], references: [id])

  @@unique([orderId, productId, priceOptionId])
  @@index([orderId])
  @@index([priceOptionId])
  @@index([productId], map: "OrderItem_productId_fkey")
}

model MyOrder {
  id                 Int         @id @default(autoincrement())
  totalAmount        Float
  amountPaid         Decimal     @db.Decimal(11, 2)
  balance            Decimal     @db.Decimal(11, 2)
  comment            String
  customerType       String
  customerId         String
  customerName       String
  orderDate          DateTime    @default(now())
  riderId            Int?
  riderName          String?
  status             Int         @default(0)
  approvedTime       String?
  dispatchTime       String?
  deliveryLocation   String?
  complete_latitude  String?
  complete_longitude String?
  complete_address   String?
  pickupTime         String?
  deliveryTime       String?
  cancel_reason      String?
  recepient          String?
  userId             Int
  clientId           Int
  countryId          Int
  regionId           Int
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  approved_by        String      @db.VarChar(200)
  approved_by_name   String      @db.VarChar(200)
  storeId            Int?
  imageUrl           String?
  client             Clients     @relation(fields: [clientId], references: [id])
  user               SalesRep    @relation(fields: [userId], references: [id])
  orderItems         OrderItem[]
  reports            Report[]    @relation("MyOrderToReport")

  @@index([userId])
  @@index([clientId])
}

model JourneyPlan {
  id                 Int       @id @default(autoincrement())
  date               DateTime
  time               String
  userId             Int?
  clientId           Int
  status             Int       @default(0)
  checkInTime        DateTime?
  latitude           Float?
  longitude          Float?
  imageUrl           String?
  notes              String?
  checkoutLatitude   Float?
  checkoutLongitude  Float?
  checkoutTime       DateTime?
  showUpdateLocation Boolean   @default(true)
  routeId            Int?
  client             Clients   @relation(fields: [clientId], references: [id])
  route              routes?   @relation(fields: [routeId], references: [id])
  user               SalesRep? @relation(fields: [userId], references: [id])
  reports            Report[]

  @@index([clientId])
  @@index([userId])
  @@index([routeId], map: "JourneyPlan_routeId_fkey")
}

model NoticeBoard {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Report {
  id               Int               @id @default(autoincrement())
  orderId          Int?
  clientId         Int
  createdAt        DateTime          @default(now())
  userId           Int
  journeyPlanId    Int?
  type             ReportType
  FeedbackReport   FeedbackReport?
  ProductReport    ProductReport[]
  productReturns   ProductReturn?
  productsSample   ProductsSample?
  client           Clients           @relation(fields: [clientId], references: [id])
  journeyPlan      JourneyPlan?      @relation(fields: [journeyPlanId], references: [id])
  user             SalesRep          @relation(fields: [userId], references: [id])
  VisibilityReport VisibilityReport?
  MyOrder          MyOrder[]         @relation("MyOrderToReport")

  @@index([userId])
  @@index([orderId])
  @@index([clientId])
  @@index([journeyPlanId])
}

model FeedbackReport {
  reportId  Int      @unique
  comment   String?
  createdAt DateTime @default(now())
  clientId  Int
  id        Int      @id @default(autoincrement())
  userId    Int
  client    Clients  @relation(fields: [clientId], references: [id])
  Report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      SalesRep @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([clientId])
  @@index([reportId])
}

model ProductReport {
  reportId    Int
  productName String?
  quantity    Int?
  comment     String?
  createdAt   DateTime @default(now())
  clientId    Int
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int?
  client      Clients  @relation(fields: [clientId], references: [id])
  Report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user        SalesRep @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([clientId])
  @@index([reportId])
}

model VisibilityReport {
  reportId  Int      @unique
  comment   String?
  imageUrl  String?
  createdAt DateTime @default(now())
  clientId  Int
  id        Int      @id @default(autoincrement())
  userId    Int
  client    Clients  @relation(fields: [clientId], references: [id])
  Report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      SalesRep @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([clientId])
  @@index([reportId])
}

model ProductReturn {
  id                Int                 @id @default(autoincrement())
  reportId          Int                 @unique
  productName       String?
  quantity          Int?
  reason            String?
  imageUrl          String?
  status            Int                 @default(0)
  clientId          Int
  userId            Int
  staff_id          Int
  staff_name        String              @db.VarChar(100)
  client            Clients             @relation(fields: [clientId], references: [id])
  report            Report              @relation(fields: [reportId], references: [id])
  user              SalesRep            @relation(fields: [userId], references: [id])
  ProductReturnItem ProductReturnItem[]

  @@index([userId])
  @@index([clientId])
}

model ProductsSample {
  id                 Int                  @id @default(autoincrement())
  reportId           Int                  @unique
  productName        String?
  quantity           Int?
  reason             String?
  status             Int                  @default(0)
  clientId           Int
  userId             Int
  client             Clients              @relation(fields: [clientId], references: [id])
  report             Report               @relation(fields: [reportId], references: [id])
  user               SalesRep             @relation(fields: [userId], references: [id])
  ProductsSampleItem ProductsSampleItem[]

  @@index([userId])
  @@index([clientId])
}

model ProductReturnItem {
  id              Int           @id @default(autoincrement())
  productReturnId Int
  productName     String
  quantity        Int
  reason          String
  imageUrl        String?
  clientId        Int
  userId          Int
  client          Clients       @relation(fields: [clientId], references: [id])
  productReturn   ProductReturn @relation(fields: [productReturnId], references: [id])
  user            SalesRep      @relation(fields: [userId], references: [id])

  @@index([productReturnId])
  @@index([userId])
  @@index([clientId])
}

model ProductsSampleItem {
  id               Int            @id @default(autoincrement())
  productsSampleId Int
  productName      String
  quantity         Int
  reason           String
  clientId         Int
  userId           Int
  client           Clients        @relation(fields: [clientId], references: [id])
  productsSample   ProductsSample @relation(fields: [productsSampleId], references: [id])
  user             SalesRep       @relation(fields: [userId], references: [id])

  @@index([productsSampleId])
  @@index([userId])
  @@index([clientId])
}

model Leave {
  id         Int      @id @default(autoincrement())
  userId     Int
  leaveType  String
  startDate  DateTime
  endDate    DateTime
  reason     String
  attachment String?
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       SalesRep @relation(fields: [userId], references: [id])

  @@index([userId], map: "leaves_userId_fkey")
  @@map("leaves")
}

model UpliftSale {
  id          Int              @id @default(autoincrement())
  clientId    Int
  userId      Int
  status      String           @default("pending")
  totalAmount Float            @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  client      Clients          @relation(fields: [clientId], references: [id])
  user        SalesRep         @relation(fields: [userId], references: [id])
  items       UpliftSaleItem[]

  @@index([clientId], map: "UpliftSale_clientId_fkey")
  @@index([userId], map: "UpliftSale_userId_fkey")
}

model UpliftSaleItem {
  id           Int        @id @default(autoincrement())
  upliftSaleId Int
  productId    Int
  quantity     Int
  unitPrice    Float
  total        Float
  createdAt    DateTime   @default(now())
  product      Product    @relation(fields: [productId], references: [id])
  upliftSale   UpliftSale @relation(fields: [upliftSaleId], references: [id])

  @@index([productId], map: "UpliftSaleItem_productId_fkey")
  @@index([upliftSaleId], map: "UpliftSaleItem_upliftSaleId_fkey")
}

model Suppliers {
  id              Int               @id @default(autoincrement())
  name            String
  accountBalance  Float             @default(0)
  contact         String
  Purchase        Purchase[]
  SupplierHistory SupplierHistory[]
}

model SupplierHistory {
  id           Int       @id @default(autoincrement())
  supplier_id  Int
  ref_id       Int
  reference    String    @db.VarChar(100)
  date         String    @db.VarChar(50)
  amount_in    Decimal   @db.Decimal(11, 2)
  amount_out   Decimal   @db.Decimal(11, 2)
  balance      Decimal   @db.Decimal(11, 2)
  staff        Int
  staff_name   String    @db.VarChar(100)
  updated_date String    @db.VarChar(100)
  Suppliers    Suppliers @relation(fields: [supplier_id], references: [id], map: "SupplierHistory_supplierId_fkey")

  @@index([supplier_id], map: "SupplierHistory_supplierId_fkey")
}

model users {
  id           Int       @id @default(autoincrement())
  username     String    @db.VarChar(100)
  department   Int
  password     String    @db.VarChar(100)
  account_code String    @db.VarChar(32)
  firstname    String?   @db.VarChar(255)
  lastname     String?   @db.VarChar(255)
  facebook_id  String?   @db.VarChar(255)
  address      String?   @db.VarChar(255)
  email        String?   @db.VarChar(255)
  phone        String    @db.VarChar(32)
  gender       String    @db.VarChar(32)
  country      String    @db.VarChar(99)
  image        String    @db.VarChar(999)
  created      DateTime? @db.DateTime(0)
  modified     DateTime? @db.DateTime(0)
  status       Boolean?  @default(true)
  Task         Task[]
}

model Task {
  id           Int       @id @default(autoincrement())
  title        String
  description  String    @db.Text
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  isCompleted  Boolean   @default(false)
  priority     String    @default("medium")
  status       String    @default("pending")
  salesRepId   Int
  assignedById Int?
  assignedBy   users?    @relation(fields: [assignedById], references: [id])
  salesRep     SalesRep  @relation(fields: [salesRepId], references: [id])

  @@index([assignedById])
  @@index([salesRepId], map: "tasks_salesRepId_fkey")
  @@map("tasks")
}

model routes {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(100)
  region       Int
  region_name  String        @db.VarChar(100)
  country_id   Int
  country_name String        @db.VarChar(100)
  leader_id    Int
  leader_name  String        @db.VarChar(100)
  status       Int
  JourneyPlan  JourneyPlan[]
}

model departments {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)
}

model clientHistory {
  id         Int     @id @default(autoincrement())
  client_id  Int
  order_id   Int
  reference  String  @db.VarChar(200)
  amount_in  Decimal @db.Decimal(10, 2)
  amount_out Decimal @db.Decimal(10, 2)
  balance    Decimal @db.Decimal(10, 2)
  my_date    String  @db.VarChar(50)
  createdAt  String  @db.VarChar(50)
  staff      Int
}

model purchase_items {
  id           Int     @id @default(autoincrement())
  tb1_id       Int
  piece_id     String  @db.VarChar(200)
  product_name String  @db.VarChar(200)
  quantity     String  @db.VarChar(200)
  rate         Decimal @db.Decimal(11, 2)
  total        Decimal @db.Decimal(11, 2)
  month        String  @db.VarChar(100)
  year         String  @db.VarChar(100)
  created_date String  @db.VarChar(100)
  my_date      String  @db.VarChar(100)
  status       Int
  staff_id     Int
  staff        String  @db.VarChar(100)
}

model purchases {
  id            Int     @id @default(autoincrement())
  supplier      Int
  comment       String  @db.VarChar(250)
  store         String  @db.VarChar(11)
  amount        Decimal @db.Decimal(11, 2)
  paid          Decimal @db.Decimal(11, 2)
  remain        Decimal @db.Decimal(11, 2)
  status        Int     @default(0)
  month         String  @db.VarChar(200)
  year          String  @db.VarChar(200)
  purchase_date String  @db.VarChar(100)
  my_date       String  @db.VarChar(20)
  staff         String  @db.VarChar(200)
}

model stock_take {
  id                Int    @id @default(autoincrement())
  store_id          Int
  product_id        Int
  expected_quantity Int
  counted_quantity  Int
  difference        Int
  stock_take_date   String @db.VarChar(50)
}

model stock_transfer {
  id            Int    @id @default(autoincrement())
  product_id    Int
  quantity      Int
  from_store    Int
  to_store      Int
  staff         Int
  staff_name    String @db.VarChar(100)
  transfer_date String @db.VarChar(50)
}

model account_update {
  id               Int     @id @default(autoincrement())
  account_id       Int
  reference        String  @db.VarChar(250)
  amount           Decimal @db.Decimal(11, 2)
  amount_in        Decimal @db.Decimal(11, 2)
  amount_out       Decimal @db.Decimal(11, 2)
  balance          Decimal @db.Decimal(11, 2)
  transaction_date String  @db.VarChar(100)
  update_date      String  @db.VarChar(100)
  staff_id         Int
  staff_name       String  @db.VarChar(100)
}

model accounts {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String  @db.VarChar(100)
  balance     Decimal @db.Decimal(11, 2)
  status      Int
}

enum ReportType {
  PRODUCT_AVAILABILITY
  VISIBILITY_ACTIVITY
  PRODUCT_SAMPLE
  PRODUCT_RETURN
  FEEDBACK
}
